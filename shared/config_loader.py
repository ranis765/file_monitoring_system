import yaml
import os
from typing import Dict, Any

# –ö–µ—à –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
_config_cache = {}
_monitoring_config_cache = None
_api_config_cache = None
_api_client_config_cache = None

def get_project_root():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    current_file_dir = os.path.dirname(os.path.abspath(__file__))
    # shared/ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ file_monitoring_system/shared/
    project_root = os.path.dirname(current_file_dir)
    return project_root

def get_config_path(config_file: str = "config.yaml") -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    project_root = get_project_root()
    config_path = os.path.join(project_root, "config", config_file)
    
    print(f"üîç Looking for config at: {config_path}")
    print(f"üìÅ Config exists: {os.path.exists(config_path)}")
    
    if not os.path.exists(config_path):
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ config.yaml –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        possible_paths = [
            config_path,
            os.path.join(project_root, config_file),
            os.path.join(os.getcwd(), "config", config_file),
            os.path.join(os.getcwd(), config_file),
        ]
        
        for path in possible_paths:
            if os.path.exists(path):
                print(f"‚úÖ Found config at: {path}")
                return path
        
        raise FileNotFoundError(f"Config file not found. Tried: {possible_paths}")
    
    return config_path

def load_config(config_file: str = "config.yaml") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if config_file in _config_cache:
        return _config_cache[config_file]
    
    config_path = get_config_path(config_file)
    
    print(f"üìñ Loading config from: {config_path}")
    
    with open(config_path, 'r', encoding='utf-8') as file:
        config = yaml.safe_load(file)
    
    print("‚úÖ Config loaded successfully!")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    _config_cache[config_file] = config
    return config

def get_database_url() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    config = load_config()
    db_config = config.get('database', {})
    
    if db_config.get('url'):
        return db_config['url']
    
    return f"postgresql://{db_config.get('user', 'monitor_user')}:{db_config.get('password', 'secure_password_123')}@{db_config.get('host', 'localhost')}:{db_config.get('port', 5432)}/{db_config.get('name', 'file_monitoring')}"

def get_api_config() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API —Å–µ—Ä–≤–µ—Ä–∞"""
    global _api_config_cache
    
    if _api_config_cache is not None:
        return _api_config_cache
    
    config = load_config()
    _api_config_cache = config.get('api_server', {})
    return _api_config_cache

def get_monitoring_config() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    global _monitoring_config_cache
    
    if _monitoring_config_cache is not None:
        return _monitoring_config_cache
    
    config = load_config()
    _monitoring_config_cache = config.get('monitoring', {})
    return _monitoring_config_cache

def get_api_client_config() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API –∫–ª–∏–µ–Ω—Ç–∞"""
    global _api_client_config_cache
    
    if _api_client_config_cache is not None:
        return _api_client_config_cache
    
    config = load_config()
    _api_client_config_cache = config.get('api_client', {})
    return _api_client_config_cache

def clear_cache():
    """–û—á–∏—â–∞–µ—Ç –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    global _config_cache, _monitoring_config_cache, _api_config_cache, _api_client_config_cache
    _config_cache = {}
    _monitoring_config_cache = None
    _api_config_cache = None
    _api_client_config_cache = None