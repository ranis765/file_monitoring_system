#!/usr/bin/env python3
import os
import time
import threading
import random
import shutil
import json
from datetime import datetime, timedelta
from pathlib import Path
import sys
import tempfile

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∞–≥–µ–Ω—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from monitoring_agent.app.file_monitor import FileMonitor
from shared.logger import setup_logger
import requests

class MockAPIClient:
    """Mock API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    
    def __init__(self, agent_id, server_url="http://localhost:8000"):
        self.agent_id = agent_id
        self.server_url = server_url
        self.sent_events = []
        self.logger = setup_logger(f"API_{agent_id}")
    
    def send_event(self, event_data):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞
            event_data['agent_id'] = self.agent_id
            event_data['simulated'] = True
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
            self.logger.info(f"üì® [{self.agent_id}] Sending {event_data['event_type']} for {event_data['file_path']}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.sent_events.append({
                'timestamp': datetime.now(),
                'event': event_data
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            try:
                response = requests.post(
                    f"{self.server_url}/api/events",
                    json=event_data,
                    timeout=5
                )
                if response.status_code == 200:
                    self.logger.info(f"‚úÖ [{self.agent_id}] Event delivered to server")
                    return True
                else:
                    self.logger.warning(f"‚ö†Ô∏è [{self.agent_id}] Server returned {response.status_code}")
            except requests.exceptions.RequestException:
                self.logger.warning(f"üåê [{self.agent_id}] Server not available, event queued")
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå [{self.agent_id}] Error sending event: {e}")
            return False
    
    def test_connection(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        try:
            response = requests.get(f"{self.server_url}/health", timeout=5)
            return response.status_code == 200
        except:
            return False

class UserSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    
    def __init__(self, user_id, test_directory, agent_id):
        self.user_id = user_id
        self.test_directory = Path(test_directory)
        self.agent_id = agent_id
        self.logger = setup_logger(f"User_{user_id}")
        self.created_files = []
        self.modified_files = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_dir = self.test_directory / f"user_{user_id}"
        self.user_dir.mkdir(exist_ok=True)
        
        self.logger.info(f"üë§ User {user_id} initialized in {self.user_dir}")
    
    def create_file(self, filename, content=None):
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª"""
        file_path = self.user_dir / filename
        
        if content is None:
            content = f"Content created by {self.user_id} at {datetime.now()}"
        
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            self.created_files.append(str(file_path))
            self.logger.info(f"üìÑ [{self.user_id}] Created file: {filename}")
            return str(file_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå [{self.user_id}] Error creating file {filename}: {e}")
            return None
    
    def modify_file(self, file_path, additional_content=None):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(file_path):
                self.logger.warning(f"‚ö†Ô∏è [{self.user_id}] File not found for modification: {file_path}")
                return False
            
            with open(file_path, 'a', encoding='utf-8') as f:
                timestamp = datetime.now().strftime("%H:%M:%S")
                new_content = f"\n\nModified by {self.user_id} at {timestamp}"
                if additional_content:
                    new_content += f"\n{additional_content}"
                f.write(new_content)
            
            if file_path not in self.modified_files:
                self.modified_files.append(file_path)
            
            self.logger.info(f"üìù [{self.user_id}] Modified file: {os.path.basename(file_path)}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå [{self.user_id}] Error modifying file {file_path}: {e}")
            return False
    
    def delete_file(self, file_path):
        """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                self.logger.info(f"üóëÔ∏è [{self.user_id}] Deleted file: {os.path.basename(file_path)}")
                return True
            else:
                self.logger.warning(f"‚ö†Ô∏è [{self.user_id}] File not found for deletion: {file_path}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå [{self.user_id}] Error deleting file {file_path}: {e}")
            return False
    
    def rename_file(self, old_path, new_filename):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(old_path):
                self.logger.warning(f"‚ö†Ô∏è [{self.user_id}] File not found for rename: {old_path}")
                return None
            
            new_path = os.path.join(os.path.dirname(old_path), new_filename)
            shutil.move(old_path, new_path)
            
            self.logger.info(f"üîÑ [{self.user_id}] Renamed {os.path.basename(old_path)} -> {new_filename}")
            return new_path
            
        except Exception as e:
            self.logger.error(f"‚ùå [{self.user_id}] Error renaming file {old_path}: {e}")
            return None
    
    def work_on_shared_file(self, shared_file_path, iterations=3):
        """–†–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—â–∏–º —Ñ–∞–π–ª–æ–º (—Å–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã)"""
        self.logger.info(f"üë• [{self.user_id}] Starting work on shared file: {os.path.basename(shared_file_path)}")
        
        for i in range(iterations):
            time.sleep(random.uniform(2, 5))  # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            
            success = self.modify_file(
                shared_file_path, 
                f"Edit #{i+1} by {self.user_id}"
            )
            
            if not success:
                break
            
            self.logger.info(f"üë• [{self.user_id}] Edit #{i+1} on shared file completed")
        
        self.logger.info(f"üë• [{self.user_id}] Finished work on shared file")

class MonitoringAgentSimulator:
    """–°–∏–º—É–ª—è—Ç–æ—Ä –∞–≥–µ–Ω—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self, agent_id, user_simulator, test_directory, server_url="http://localhost:8000"):
        self.agent_id = agent_id
        self.user_simulator = user_simulator
        self.test_directory = test_directory
        self.server_url = server_url
        self.logger = setup_logger(f"Agent_{agent_id}")
        
        # Mock API –∫–ª–∏–µ–Ω—Ç
        self.api_client = MockAPIClient(agent_id, server_url)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.config = {
            'watch_paths': [str(test_directory)],
            'poll_interval': 1,
            'background_check_interval': 10,
            'sessions': {
                'session_timeout_minutes': 5,
                'max_session_hours': 24
            },
            'hashing': {
                'enabled': True,
                'method': 'md5',
                'max_file_size_mb': 50
            },
            'ignore_patterns': ['.tmp', '~$*'],
            'ignore_extensions': ['.log'],
            'ignore_dirs': ['temp', 'backup']
        }
        
        self.logger.info(f"ü§ñ Agent {agent_id} initialized for user {user_simulator.user_id}")
    
    def simulate_file_operations(self, duration_minutes=10):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        self.logger.info(f"üé¨ [{self.agent_id}] Starting simulation for {duration_minutes} minutes")
        
        end_time = datetime.now() + timedelta(minutes=duration_minutes)
        operation_count = 0
        
        while datetime.now() < end_time:
            try:
                # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–∏
                operation = random.choice([
                    'create_doc',
                    'create_excel', 
                    'modify_existing',
                    'delete_file',
                    'rename_file',
                    'work_shared'
                ])
                
                if operation == 'create_doc':
                    # –°–æ–∑–¥–∞–Ω–∏–µ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞
                    filename = f"document_{self.user_simulator.user_id}_{operation_count}.docx"
                    file_path = self.user_simulator.create_file(filename)
                    if file_path:
                        self._simulate_event('created', file_path)
                
                elif operation == 'create_excel':
                    # –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞
                    filename = f"spreadsheet_{self.user_simulator.user_id}_{operation_count}.xlsx"
                    file_path = self.user_simulator.create_file(filename)
                    if file_path:
                        self._simulate_event('created', file_path)
                
                elif operation == 'modify_existing':
                    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
                    if self.user_simulator.created_files:
                        file_path = random.choice(self.user_simulator.created_files)
                        if self.user_simulator.modify_file(file_path):
                            self._simulate_event('modified', file_path)
                
                elif operation == 'delete_file':
                    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if self.user_simulator.created_files:
                        file_path = random.choice(self.user_simulator.created_files)
                        if self.user_simulator.delete_file(file_path):
                            self._simulate_event('deleted', file_path)
                            self.user_simulator.created_files.remove(file_path)
                
                elif operation == 'rename_file':
                    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                    if self.user_simulator.created_files:
                        file_path = random.choice(self.user_simulator.created_files)
                        new_name = f"renamed_{self.user_simulator.user_id}_{operation_count}.docx"
                        new_path = self.user_simulator.rename_file(file_path, new_name)
                        if new_path:
                            self._simulate_event('moved', file_path, new_path)
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –≤ —Å–ø–∏—Å–∫–µ
                            idx = self.user_simulator.created_files.index(file_path)
                            self.user_simulator.created_files[idx] = new_path
                
                elif operation == 'work_shared':
                    # –†–∞–±–æ—Ç–∞ —Å –æ–±—â–∏–º —Ñ–∞–π–ª–æ–º (–µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
                    shared_files = list(Path(self.test_directory).glob("shared_*.docx"))
                    if shared_files:
                        shared_file = random.choice(shared_files)
                        self.user_simulator.work_on_shared_file(str(shared_file), iterations=2)
                        self._simulate_event('modified', str(shared_file))
                
                operation_count += 1
                
                # –°–ª—É—á–∞–π–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
                time.sleep(random.uniform(3, 8))
                
                # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                if operation_count % 5 == 0:
                    self._check_system_state()
                    
            except Exception as e:
                self.logger.error(f"‚ùå [{self.agent_id}] Error in simulation: {e}")
                time.sleep(5)
        
        self.logger.info(f"üèÅ [{self.agent_id}] Simulation completed. Total operations: {operation_count}")
    
    def _simulate_event(self, event_type, file_path, dest_path=None):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–∞"""
        event_data = {
            'file_path': file_path,
            'file_name': os.path.basename(file_path),
            'event_type': event_type,
            'user_id': self.user_simulator.user_id,
            'event_timestamp': datetime.now().isoformat(),
            'file_hash': f"mock_hash_{random.randint(1000, 9999)}",  # Mock hash
            'session_id': f"mock_session_{random.randint(10000, 99999)}",
            'resume_count': random.randint(0, 2)
        }
        
        if event_type == 'moved' and dest_path:
            event_data.update({
                'old_file_path': file_path,
                'old_file_name': os.path.basename(file_path),
                'file_path': dest_path,
                'file_name': os.path.basename(dest_path)
            })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ mock API –∫–ª–∏–µ–Ω—Ç
        return self.api_client.send_event(event_data)
    
    def _check_system_state(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            if self.api_client.test_connection():
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤
                response = requests.get(f"{self.server_url}/api/current-editors/test", timeout=5)
                if response.status_code == 200:
                    editors_data = response.json()
                    self.logger.info(f"üìä [{self.agent_id}] System check: {len(editors_data.get('current_editors', []))} active editors")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
            self.logger.info(f"üìà [{self.agent_id}] Agent stats: {len(self.api_client.sent_events)} events sent")
            
        except Exception as e:
            self.logger.debug(f"üîç [{self.agent_id}] System check failed: {e}")

def create_shared_files(test_directory):
    """–°–æ–∑–¥–∞–µ—Ç –æ–±—â–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã"""
    shared_dir = Path(test_directory) / "shared"
    shared_dir.mkdir(exist_ok=True)
    
    shared_files = [
        "shared_project.docx",
        "shared_data.xlsx", 
        "shared_presentation.pptx"
    ]
    
    created_files = []
    for filename in shared_files:
        file_path = shared_dir / filename
        with open(file_path, 'w') as f:
            f.write(f"Shared file created at {datetime.now()}\nInitial content")
        created_files.append(str(file_path))
    
    return created_files

def monitor_system_state(server_url, duration_minutes):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
    logger = setup_logger("SystemMonitor")
    end_time = datetime.now() + timedelta(minutes=duration_minutes)
    
    logger.info("üñ•Ô∏è Starting system monitoring...")
    
    while datetime.now() < end_time:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
            health_response = requests.get(f"{server_url}/health", timeout=5)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_response = requests.get(f"{server_url}/api/users", timeout=5)
            
            # –ü–æ–ª—É—á–∞–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∞–π–ª—ã
            multi_user_response = requests.get(f"{server_url}/api/multi-user-files", timeout=5)
            
            if all(r.status_code == 200 for r in [health_response, users_response, multi_user_response]):
                users_data = users_response.json()
                multi_user_data = multi_user_response.json()
                
                logger.info(f"üìä SYSTEM: {len(users_data.get('users', []))} users, "
                          f"{len(multi_user_data.get('multi_user_files', []))} multi-user files")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ–∞–π–ª—ã
                for file_info in multi_user_data.get('multi_user_files', []):
                    editors = [editor['username'] for editor in file_info.get('editors', [])]
                    logger.info(f"üë• MULTI-USER: {file_info['file_name']} - Editors: {', '.join(editors)}")
            
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
        except Exception as e:
            logger.error(f"‚ùå SYSTEM MONITOR ERROR: {e}")
            time.sleep(10)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏"""
    print("üéØ Multi-Agent Monitoring System Simulator")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
    SIMULATION_DURATION = 15  # –º–∏–Ω—É—Ç
    SERVER_URL = "http://localhost:8000"
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    with tempfile.TemporaryDirectory() as temp_dir:
        test_directory = Path(temp_dir)
        print(f"üìÅ Test directory: {test_directory}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–µ —Ñ–∞–π–ª—ã
        shared_files = create_shared_files(test_directory)
        print(f"üìÑ Created {len(shared_files)} shared files")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–º—É–ª—è—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = [
            UserSimulator("user1", test_directory, "agent1"),
            UserSimulator("user2", test_directory, "agent2"),
            UserSimulator("user3", test_directory, "agent3")  # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        ]
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        agents = [
            MonitoringAgentSimulator("agent1", users[0], test_directory, SERVER_URL),
            MonitoringAgentSimulator("agent2", users[1], test_directory, SERVER_URL),
            MonitoringAgentSimulator("agent3", users[2], test_directory, SERVER_URL)
        ]
        
        print(f"üë• Created {len(users)} users with {len(agents)} monitoring agents")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(
            target=monitor_system_state,
            args=(SERVER_URL, SIMULATION_DURATION + 1),
            daemon=True
        )
        monitor_thread.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö
        agent_threads = []
        for i, agent in enumerate(agents):
            thread = threading.Thread(
                target=agent.simulate_file_operations,
                args=(SIMULATION_DURATION,),
                daemon=True
            )
            thread.start()
            agent_threads.append(thread)
            print(f"üöÄ Started agent {agent.agent_id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
        print(f"‚è∞ Simulation running for {SIMULATION_DURATION} minutes...")
        
        for thread in agent_threads:
            thread.join(timeout=SIMULATION_DURATION * 60 + 10)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä SIMULATION RESULTS:")
        print("=" * 50)
        
        total_events = 0
        for agent in agents:
            events_count = len(agent.api_client.sent_events)
            total_events += events_count
            print(f"ü§ñ {agent.agent_id}: {events_count} events sent")
        
        print(f"üìà TOTAL EVENTS: {total_events}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        try:
            print("\nüîç FINAL SYSTEM STATE:")
            multi_user_response = requests.get(f"{SERVER_URL}/api/multi-user-files", timeout=5)
            if multi_user_response.status_code == 200:
                multi_user_data = multi_user_response.json()
                print(f"üë• Multi-user files: {len(multi_user_data.get('multi_user_files', []))}")
                
                for file_info in multi_user_data.get('multi_user_files', []):
                    editors = [editor['username'] for editor in file_info.get('editors', [])]
                    print(f"   üìÑ {file_info['file_name']}: {', '.join(editors)}")
            
        except Exception as e:
            print(f"‚ùå Error checking final state: {e}")
        
        print("\n‚úÖ Simulation completed!")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë Simulation interrupted by user")
    except Exception as e:
        print(f"‚ùå Simulation error: {e}")
        import traceback
        traceback.print_exc()