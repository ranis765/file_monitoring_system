import os
import time
import threading
from datetime import datetime
from shared.logger import setup_logger

class BackgroundSessionChecker:
    def __init__(self, event_handler, check_interval=10):
        self.event_handler = event_handler
        self.check_interval = check_interval
        self.logger = setup_logger(__name__)
        self._stop_event = threading.Event()
        self._thread = None
        
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Å—Å–∏–π"""
        if self._thread and self._thread.is_alive():
            self.logger.warning("Background checker is already running")
            return
            
        self._stop_event.clear()
        self._thread = threading.Thread(target=self._run, daemon=True)
        self._thread.start()
        self.logger.info(f"üéØ Background session checker started (interval: {self.check_interval}s)")
        
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self._stop_event.set()
        if self._thread:
            self._thread.join(timeout=5)
        self.logger.info("Background session checker stopped")
        
    def _run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        while not self._stop_event.is_set():
            try:
                self._check_sessions()
            except Exception as e:
                self.logger.error(f"Error in background session checker: {e}")
                
            # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
            self._stop_event.wait(self.check_interval)
            
    def _check_sessions(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç expired —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            self.logger.debug("üîç Starting background session check...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏
            active_before = len(self.event_handler.session_manager.active_sessions)
            
            # –í–´–ó–´–í–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –ò–°–¢–ï–ö–®–ò–• –°–ï–°–°–ò–ô –ü–ï–†–í–û–ô
            expired_count = self._check_expired_sessions_aggressive()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
            self.event_handler.check_open_files()
            
            # –û—á–∏—â–∞–µ–º orphaned —Å–µ—Å—Å–∏–∏
            self.event_handler.cleanup_orphaned_sessions()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏
            active_after = len(self.event_handler.session_manager.active_sessions)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if expired_count > 0:
                self.logger.info(f"‚úÖ Background check: closed {expired_count} expired sessions")
            elif active_before > 0:
                self.logger.debug(f"üìä Background check: {active_after}/{active_before} sessions still active")
            else:
                self.logger.debug("üí§ Background check: no active sessions")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error in background session check: {e}")
    
    def _check_expired_sessions_aggressive(self):
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
            expired_sessions = self.event_handler.session_manager.check_and_close_expired_sessions()
            closed_count = 0
            
            for session_data in expired_sessions:
                file_path = session_data['file_path']
                username = session_data['username']
                
                # –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û ended_at –£–°–¢–ê–ù–û–í–õ–ï–ù–û
                if 'ended_at' not in session_data or session_data['ended_at'] is None:
                    self.logger.error(f"‚ùå Session closed but ended_at is None for: {file_path}")
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ö–µ—à –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                file_hash = None
                if self.event_handler.config.get('hashing', {}).get('enabled', True):
                    file_hash = self.event_handler.hash_calculator.calculate_file_hash_with_retry(file_path)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ closed –¥–ª—è expired —Å–µ—Å—Å–∏–∏
                event_data = {
                    'file_path': file_path,
                    'file_name': session_data.get('file_name', os.path.basename(file_path)),
                    'event_type': 'closed',
                    'file_hash': file_hash,
                    'user_id': username,
                    'session_id': session_data['session_id'],
                    'resume_count': session_data.get('resume_count', 0),
                    'session_duration': (session_data['ended_at'] - session_data['started_at']).total_seconds(),
                    'event_timestamp': session_data['ended_at'].isoformat()  # –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–†–ï–ú–Ø –ó–ê–ö–†–´–¢–ò–Ø –°–ï–°–°–ò–ò
                }
                
                success = self.event_handler.api_client.send_event(event_data)
                if success:
                    self.logger.info(f"üïí Closed expired session: {file_path} (ended_at: {session_data['ended_at']})")
                    closed_count += 1
                else:
                    self.logger.error(f"‚ùå Failed to send closed event for: {file_path}")
            
            return closed_count
            
        except Exception as e:
            self.logger.error(f"‚ùå Error in aggressive session check: {e}")
            return 0