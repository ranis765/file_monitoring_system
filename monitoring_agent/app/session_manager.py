# session_manager.py
import os
import uuid
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from shared.logger import setup_logger

class SessionManager:
    def __init__(self):
        self.active_sessions: Dict[str, Dict] = {}  # file_path:username -> session_data
        self.closed_sessions: Dict[str, List[Dict]] = {}  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π
        self.logger = setup_logger(__name__)
        self.config = {}
    
    def set_config(self, config: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.config = config
        timeout = self.config.get('session_timeout_minutes', 30)
        self.logger.info(f"‚öôÔ∏è Session config: timeout={timeout}min, max_age={self.config.get('max_session_hours', 3)}h")
    
    def _get_session_key(self, file_path: str, username: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á —Å–µ—Å—Å–∏–∏"""
        return f"{file_path}:{username}"
    
    def _find_recently_closed(self, session_key: str, hours: int = 1) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if session_key not in self.closed_sessions:
            return None

        closed_sessions = self.closed_sessions[session_key]
        if not closed_sessions:
            return None

        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é
        last_session = closed_sessions[-1]

        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –∏–º–µ–µ—Ç ended_at
        if not self._can_resume_session(last_session):
            self.logger.debug(f"üö´ Session cannot be resumed: {session_key} (commented: {last_session.get('is_commented')}, ended_at: {last_session.get('ended_at')})")
            return None

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –æ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if 'ended_at' in last_session and last_session['ended_at']:
            time_since_close = datetime.now() - last_session['ended_at']
            if time_since_close <= timedelta(hours=hours):
                return last_session

        return None
    
    def _resume_session(self, session_data: Dict, file_hash: str = None) -> Dict:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        session_key = self._get_session_key(session_data['file_path'], session_data['username'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        resumed_session = session_data.copy()
        resumed_session['last_activity'] = datetime.now()
        resumed_session['resumed_at'] = datetime.now()
        resumed_session['resume_count'] = resumed_session.get('resume_count', 0) + 1
        resumed_session['hash_before'] = file_hash
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Ç.–∫. —Å–µ—Å—Å–∏—è —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞
        resumed_session.pop('ended_at', None)
        resumed_session.pop('hash_after', None)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ-—Ä–µ–¥–∞–∫—Ç–æ—Ä–∞—Ö –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        if 'co_editors' in session_data:
            resumed_session['co_editors'] = session_data['co_editors']
        if 'is_multi_user' in session_data:
            resumed_session['is_multi_user'] = session_data['is_multi_user']
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions[session_key] = resumed_session
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
        if session_key in self.closed_sessions and session_data in self.closed_sessions[session_key]:
            self.closed_sessions[session_key].remove(session_data)
        
        self.logger.info(f"üîÑ Resumed session for {resumed_session['file_path']}")
        
        return resumed_session
    
    def get_active_session(self, file_path: str, username: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_key = self._get_session_key(file_path, username)
        session_data = self.active_sessions.get(session_key)
        
        if session_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
            if self._is_session_expired(session_data):
                # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ
                self.logger.info(f"üïí Session expired, closing: {file_path}")
                self.close_session(file_path, username)
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            session_data['last_activity'] = datetime.now()
        
        return session_data
    
    def _is_session_expired(self, session_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        timeout_minutes = self.config.get('session_timeout_minutes', 30)
        max_age_hours = self.config.get('max_session_hours', 3)
        
        last_activity = session_data['last_activity']
        session_age = datetime.now() - session_data['started_at']
        
        time_since_activity = datetime.now() - last_activity
        timeout_seconds = timeout_minutes * 60
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if time_since_activity.total_seconds() > timeout_seconds:
            self.logger.info(f"üïí Session expired by timeout: {session_data['file_path']}, inactive for {time_since_activity.total_seconds():.1f}s > {timeout_seconds}s")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
        if session_age.total_seconds() > (max_age_hours * 3600):
            self.logger.info(f"üìÖ Session expired by max age: {session_data['file_path']}, age: {session_age.total_seconds()/3600:.1f}h")
            return True
        
        return False
    
    def check_and_close_expired_sessions(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        expired_sessions = []
        
        total_sessions = len(self.active_sessions)
        if total_sessions == 0:
            return expired_sessions
            
        self.logger.info(f"üîç Checking {total_sessions} active sessions for expiration...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        sessions_to_check = list(self.active_sessions.items())
        
        for session_key, session_data in sessions_to_check:
            try:
                if self._is_session_expired(session_data):
                    file_path = session_data['file_path']
                    username = session_data['username']
                    
                    time_since_activity = datetime.now() - session_data['last_activity']
                    self.logger.info(f"üîí Closing expired session: {file_path} (inactive: {time_since_activity.total_seconds():.1f}s)")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å ended_at
                    closed_data = self.close_session(file_path, username)
                    if closed_data:
                        expired_sessions.append(closed_data)
                        self.logger.info(f"‚úÖ Session closed with ended_at: {closed_data['ended_at']}")
                        
            except Exception as e:
                self.logger.error(f"‚ùå Error checking session {session_key}: {e}")
        
        if expired_sessions:
            self.logger.info(f"‚úÖ Closed {len(expired_sessions)} expired sessions")
        else:
            self.logger.debug(f"üìä All {total_sessions} sessions are active")
        
        return expired_sessions
    
    def smart_create_session(self, file_path: str, username: str, file_hash: str = None, resume_window_hours: int = 1) -> Dict:
        """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π"""
    
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = self.get_active_session(file_path, username)
        if active_session:
            return active_session

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        session_key = self._get_session_key(file_path, username)
        recently_closed = self._find_recently_closed(session_key, resume_window_hours)

        # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: —è–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ is_commented
        if recently_closed and recently_closed.get('is_commented', False):
            self.logger.info(f"üö´ Cannot resume commented session for {file_path} by {username}")
            recently_closed = None

        if recently_closed:
            return self._resume_session(recently_closed, file_hash)
        else:
            return self._create_new_session(file_path, username, file_hash)

    def can_resume_session(self, file_path: str, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        session_key = self._get_session_key(file_path, username)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è - –º–æ–∂–Ω–æ "–≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" (–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)
        if session_key in self.active_sessions:
            return True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–µ—Å—Å–∏–∏
        recently_closed = self._find_recently_closed(session_key)
        if recently_closed:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞
            return self._can_resume_session(recently_closed)

        return False    
    
    def _create_new_session(self, file_path: str, username: str, file_hash: str = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        session_key = self._get_session_key(file_path, username)
        
        session_data = {
            'session_id': str(uuid.uuid4()),
            'file_path': file_path,
            'file_name': os.path.basename(file_path),
            'username': username,
            'started_at': datetime.now(),
            'last_activity': datetime.now(),
            'resume_count': 0,
            'hash_before': file_hash,
            'hash_after': None,
            'events': []
        }
        
        self.active_sessions[session_key] = session_data
        self.logger.info(f"üÜï New session created: {file_path} by {username}")
        
        return session_data
    
   
    
    # def close_session(self, file_path: str, username: str, file_hash: str = None) -> Optional[Dict]:
    #     """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    #     session_key = self._get_session_key(file_path, username)

    #     if session_key not in self.active_sessions:
    #         self.logger.debug(f"‚ÑπÔ∏è No active session to close (already closed): {session_key}")
    #         return None

    #     session_data = self.active_sessions[session_key]

    #     # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    #     session_data['ended_at'] = datetime.now()  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è
    #     session_data['hash_after'] = file_hash
    #     session_data['is_commented'] = False

    #     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π
    #     if session_key not in self.closed_sessions:
    #         self.closed_sessions[session_key] = []

    #     self.closed_sessions[session_key].append(session_data.copy())

    #     # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ—Å—Å–∏–π
    #     if len(self.closed_sessions[session_key]) > 5:
    #         self.closed_sessions[session_key] = self.closed_sessions[session_key][-5:]

    #     # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
    #     del self.active_sessions[session_key]

    #     self.logger.info(f"üîí Session closed: {file_path} by {username} (ended_at: {session_data['ended_at']})")

    #     return session_data
    
    def close_session(self, file_path: str, username: str, file_hash: str = None) -> Optional[Dict]:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é - –£–°–ò–õ–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–†–ê–ï–í–´–• –°–õ–£–ß–ê–ï–í"""
        try:
            session_key = self._get_session_key(file_path, username)

            if session_key not in self.active_sessions:
                self.logger.debug(f"‚ÑπÔ∏è No active session to close: {session_key}")
                return None

            session_data = self.active_sessions[session_key]

            # –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï ended_at
            session_data['ended_at'] = datetime.now()
            session_data['hash_after'] = file_hash
        
            # –ó–ê–©–ò–¢–ê –û–¢ –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –í –ò–°–¢–û–†–ò–ò
            if session_key not in self.closed_sessions:
                self.closed_sessions[session_key] = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Ç –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            existing_session = next((s for s in self.closed_sessions[session_key] 
                               if s.get('session_id') == session_data.get('session_id')), None)
            if not existing_session:
                self.closed_sessions[session_key].append(session_data.copy())

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.closed_sessions[session_key]) > 5:
                self.closed_sessions[session_key] = self.closed_sessions[session_key][-5:]

            # –£–î–ê–õ–Ø–ï–ú –ò–ó –ê–ö–¢–ò–í–ù–´–• –ü–û–°–õ–ï –°–û–•–†–ê–ù–ï–ù–ò–Ø
            del self.active_sessions[session_key]

            self.logger.info(f"üîí Session closed: {file_path} by {username}")
            return session_data
        
        except Exception as e:
            self.logger.error(f"‚ùå Critical error closing session {file_path}:{username}: {e}")
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            try:
                if session_key in self.active_sessions:
                    del self.active_sessions[session_key]
            except:
                pass
            return None
    
    def cleanup_expired_sessions(self, event_handler) -> List[Dict]:
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        expired_sessions = self.check_and_close_expired_sessions()
        
        for session_data in expired_sessions:
            file_path = session_data['file_path']
            username = session_data['username']
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            file_hash = None
            if os.path.exists(file_path) and event_handler.config.get('hashing', {}).get('enabled', True):
                file_hash = event_handler.hash_calculator.calculate_file_hash_with_retry(file_path)
                session_data['hash_after'] = file_hash
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
            event_data = {
                'file_path': file_path,
                'file_name': session_data['file_name'],
                'event_type': 'closed',
                'file_hash': file_hash,
                'user_id': username,
                'session_id': session_data['session_id'],
                'resume_count': session_data.get('resume_count', 0),
                'session_started_at': session_data['started_at'].isoformat(),
                'session_ended_at': session_data['ended_at'].isoformat(),
                'source': 'background_checker',
                'event_timestamp': datetime.now().isoformat()
            }
            
            success = event_handler.api_client.send_event(event_data)
            if not success:
                event_handler.logger.error(f"Failed to send closed event for expired session: {file_path}")
        
        return expired_sessions
    
    def get_session_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π"""
        active_sessions = len(self.active_sessions)
        closed_sessions_count = sum(len(sessions) for sessions in self.closed_sessions.values())
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏—è—Ö
        multi_user_sessions = 0
        for session_data in self.active_sessions.values():
            if session_data.get('is_multi_user') or len(session_data.get('co_editors', [])) > 0:
                multi_user_sessions += 1
        
        return {
            'active_sessions': active_sessions,
            'closed_sessions': closed_sessions_count,
            'multi_user_sessions': multi_user_sessions,
            'session_history_size': len(self.closed_sessions)
        }
    
    def mark_session_as_commented(self, file_path: str, username: str) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç —Å–µ—Å—Å–∏—é –∫–∞–∫ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é - –ù–û–í–´–ô –ú–ï–¢–û–î"""
        session_key = self._get_session_key(file_path, username)
    
        # –ü–æ–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        if session_key in self.active_sessions:
            self.active_sessions[session_key]['is_commented'] = True
            self.logger.info(f"üí¨ Marked active session as commented: {file_path} by {username}")
            return True
    
        # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if session_key in self.closed_sessions and self.closed_sessions[session_key]:
            last_session = self.closed_sessions[session_key][-1]
            last_session['is_commented'] = True
            self.logger.info(f"üí¨ Marked closed session as commented: {file_path} by {username}")
            return True
    
        return False
    
    def is_session_commented(self, file_path: str, username: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_key = self._get_session_key(file_path, username)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        if session_key in self.active_sessions:
            return self.active_sessions[session_key].get('is_commented', False)
    
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π
        if session_key in self.closed_sessions and self.closed_sessions[session_key]:
            last_session = self.closed_sessions[session_key][-1]
            return last_session.get('is_commented', False)
    
        return False
    
    def _can_resume_session(self, session_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é"""
        # –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ - –Ω–µ–ª—å–∑—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
        if session_data.get('is_commented', False):
            return False
    
        # –ï—Å–ª–∏ –µ—Å—Ç—å ended_at - —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∏ –Ω–µ–ª—å–∑—è –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
        if session_data.get('ended_at') is not None:
            return False
        
        return True