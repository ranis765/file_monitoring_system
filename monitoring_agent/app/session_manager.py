import os
import uuid
from datetime import datetime, timedelta
from typing import Dict, Optional, List
from shared.logger import setup_logger

class SessionManager:
    def __init__(self):
        self.active_sessions: Dict[str, Dict] = {}  # file_path:username -> session_data
        self.closed_sessions: Dict[str, List[Dict]] = {}  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π
        self.logger = setup_logger(__name__)
        self.config = {}
    
    def set_config(self, config: dict):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        self.config = config
        timeout = self.config.get('session_timeout_minutes', 1)
        self.logger.info(f"‚öôÔ∏è Session config: timeout={timeout}min, max_age={self.config.get('max_session_hours', 3)}h")
    
    def _get_session_key(self, file_path: str, username: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á —Å–µ—Å—Å–∏–∏"""
        return f"{file_path}:{username}"
    
    def _find_recently_closed(self, session_key: str, hours: int = 1) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        if session_key not in self.closed_sessions:
            return None
        
        closed_sessions = self.closed_sessions[session_key]
        if not closed_sessions:
            return None
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é
        last_session = closed_sessions[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫—Ä—ã—Ç–∞ –ª–∏ –æ–Ω–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if 'ended_at' in last_session and last_session['ended_at']:
            time_since_close = datetime.now() - last_session['ended_at']
            if time_since_close <= timedelta(hours=hours):
                return last_session
        
        return None
    
    def _resume_session(self, session_data: Dict, file_hash: str = None) -> Dict:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        session_key = self._get_session_key(session_data['file_path'], session_data['username'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        resumed_session = session_data.copy()
        resumed_session['last_activity'] = datetime.now()
        resumed_session['resumed_at'] = datetime.now()
        resumed_session['resume_count'] = resumed_session.get('resume_count', 0) + 1
        resumed_session['hash_before'] = file_hash
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è, —Ç.–∫. —Å–µ—Å—Å–∏—è —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞
        resumed_session.pop('ended_at', None)
        resumed_session.pop('hash_after', None)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        self.active_sessions[session_key] = resumed_session
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å
        if session_key in self.closed_sessions and session_data in self.closed_sessions[session_key]:
            self.closed_sessions[session_key].remove(session_data)
        
        self.logger.info(f"üîÑ Resumed session for {resumed_session['file_path']}")
        
        return resumed_session
    
    def get_active_session(self, file_path: str, username: str) -> Optional[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_key = self._get_session_key(file_path, username)
        session_data = self.active_sessions.get(session_key)
        
        if session_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è
            if self._is_session_expired(session_data):
                # –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–µ
                self.logger.info(f"üïí Session expired, closing: {file_path}")
                self.close_session(file_path, username)
                return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            session_data['last_activity'] = datetime.now()
        
        return session_data
    
    def _is_session_expired(self, session_data: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        timeout_minutes = self.config.get('session_timeout_minutes', 1)
        max_age_hours = self.config.get('max_session_hours', 3)
        
        last_activity = session_data['last_activity']
        session_age = datetime.now() - session_data['started_at']
        
        time_since_activity = datetime.now() - last_activity
        timeout_seconds = timeout_minutes * 60
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if time_since_activity.total_seconds() > timeout_seconds:
            self.logger.info(f"üïí Session expired by timeout: {session_data['file_path']}, inactive for {time_since_activity.total_seconds():.1f}s > {timeout_seconds}s")
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–µ—Å—Å–∏–∏
        if session_age.total_seconds() > (max_age_hours * 3600):
            self.logger.info(f"üìÖ Session expired by max age: {session_data['file_path']}, age: {session_age.total_seconds()/3600:.1f}h")
            return True
        
        return False
    
    def check_and_close_expired_sessions(self) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        expired_sessions = []
        
        total_sessions = len(self.active_sessions)
        if total_sessions == 0:
            return expired_sessions
            
        self.logger.info(f"üîç Checking {total_sessions} active sessions for expiration...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
        sessions_to_check = list(self.active_sessions.items())
        
        for session_key, session_data in sessions_to_check:
            try:
                if self._is_session_expired(session_data):
                    file_path = session_data['file_path']
                    username = session_data['username']
                    
                    time_since_activity = datetime.now() - session_data['last_activity']
                    self.logger.info(f"üîí Closing expired session: {file_path} (inactive: {time_since_activity.total_seconds():.1f}s)")
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å ended_at
                    closed_data = self.close_session(file_path, username)
                    if closed_data:
                        expired_sessions.append(closed_data)
                        self.logger.info(f"‚úÖ Session closed with ended_at: {closed_data['ended_at']}")
                        
            except Exception as e:
                self.logger.error(f"‚ùå Error checking session {session_key}: {e}")
        
        if expired_sessions:
            self.logger.info(f"‚úÖ Closed {len(expired_sessions)} expired sessions")
        else:
            self.logger.debug(f"üìä All {total_sessions} sessions are active")
        
        return expired_sessions
    
    def smart_create_session(self, file_path: str, username: str, file_hash: str = None, resume_window_hours: int = 1) -> Dict:
        """–£–º–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–µ—Å—Å–∏–∏"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
        active_session = self.get_active_session(file_path, username)
        if active_session:
            return active_session
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–∫—Ä—ã—Ç—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        session_key = self._get_session_key(file_path, username)
        recently_closed = self._find_recently_closed(session_key, resume_window_hours)
        
        if recently_closed:
            return self._resume_session(recently_closed, file_hash)
        else:
            return self.create_session(file_path, username, file_hash)
    
    def create_session(self, file_path: str, username: str, file_hash: str = None) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é"""
        session_key = self._get_session_key(file_path, username)
        
        session_data = {
            'session_id': str(uuid.uuid4()),
            'file_path': file_path,
            'file_name': os.path.basename(file_path),
            'username': username,
            'started_at': datetime.now(),
            'last_activity': datetime.now(),
            'hash_before': file_hash,
            'events': [],
            'resume_count': 0
        }
        
        self.active_sessions[session_key] = session_data
        self.logger.info(f"‚úÖ Created session for {file_path}")
        
        return session_data
    
    def update_session(self, file_path: str, username: str, file_hash: str = None) -> Dict:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        session_data = self.get_active_session(file_path, username)
        
        if session_data:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
            if file_hash:
                session_data['hash_after'] = file_hash
            session_data['last_activity'] = datetime.now()
            self.logger.debug(f"üìù Updated session for {file_path}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_data = self.create_session(file_path, username, file_hash)
        
        return session_data
    
    def close_session(self, file_path: str, username: str, file_hash: str = None) -> Optional[Dict]:
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        session_key = self._get_session_key(file_path, username)
        session_data = self.active_sessions.pop(session_key, None)
        
        if session_data:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è - –í–ê–ñ–ù–û: –î–û–ë–ê–í–õ–ï–ù–û –í–†–ï–ú–Ø –ó–ê–ö–†–´–¢–ò–Ø
            ended_at = datetime.now()
            session_data['ended_at'] = ended_at
            
            if file_hash:
                session_data['hash_after'] = file_hash
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–µ—Å—Å–∏–π
            if session_key not in self.closed_sessions:
                self.closed_sessions[session_key] = []
            self.closed_sessions[session_key].append(session_data)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            if len(self.closed_sessions[session_key]) > 10:
                self.closed_sessions[session_key] = self.closed_sessions[session_key][-10:]
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏
            session_duration = ended_at - session_data['started_at']
            self.logger.info(f"üîí Closed session for {file_path} (duration: {session_duration.total_seconds():.1f}s, ended_at: {ended_at})")
            
            return session_data
        else:
            self.logger.debug(f"‚ùå No active session found for: {file_path} (user: {username})")
            return None
    
    def close_all_sessions_for_file(self, file_path: str) -> List[Dict]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        closed_sessions = []
        
        sessions_to_close = []
        for session_key, session_data in list(self.active_sessions.items()):
            if session_data['file_path'] == file_path:
                sessions_to_close.append((session_data['file_path'], session_data['username']))
        
        self.logger.info(f"üîç Found {len(sessions_to_close)} sessions to close for: {file_path}")
        
        for file_path, username in sessions_to_close:
            session_data = self.close_session(file_path, username)
            if session_data:
                closed_sessions.append(session_data)
        
        return closed_sessions
    
    def cleanup_expired_sessions(self, event_handler) -> list:
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏"""
        return self.check_and_close_expired_sessions()
    
    def get_session_stats(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–µ—Å—Å–∏—è–º"""
        total_resumes = sum(session.get('resume_count', 0) for session in self.active_sessions.values())
        
        return {
            'active_sessions': len(self.active_sessions),
            'session_keys': list(self.active_sessions.keys()),
            'total_resumes': total_resumes,
            'closed_sessions_count': sum(len(sessions) for sessions in self.closed_sessions.values())
        }
    
    def get_session_history(self, file_path: str, username: str) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π –¥–ª—è —Ñ–∞–π–ª–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        session_key = self._get_session_key(file_path, username)
        return self.closed_sessions.get(session_key, [])