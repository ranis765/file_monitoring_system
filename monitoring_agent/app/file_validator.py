import os
import fnmatch
import re
from typing import List
from shared.logger import setup_logger

class FileValidator:
    def __init__(self, config: dict):
        self.config = config
        self.logger = setup_logger(__name__)

        # –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –†–ê–ó–ú–ï–†–ê –ö–≠–®–ê
        self._category_cache = {}
        self._max_cache_size = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
        self._cache_hits = 0
        self._cache_misses = 0
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –§–ê–ô–õ–û–í - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        self.FILE_CATEGORIES = {
            # –û–°–ù–û–í–ù–´–ï –§–ê–ô–õ–´ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
            'MAIN': [
                # Office
                '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx', '.rtf',
                # PDF –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
                '.pdf', '.txt', '.md',
                # OpenDocument
                '.odt', '.ods', '.odp',
                # CAD —Å–∏—Å—Ç–µ–º—ã
                '.dwg', '.dxf', '.dgn', '.rvt', '.rfa', '.rte', '.sat', '.ipt', '.iam', '.prt', '.asm', '.sldprt', '.sldasm',
                '.3dm', '.skp', '.max', '.blend', '.mb', '.ma',
                # Credo –∏ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã
                '.crproj', '.credoproj', '.gpx', '.kml', '.kmz',
                # –ê—Ä—Ö–∏–≤—ã –∏ –æ–±—Ä–∞–∑—ã
                '.zip', '.rar', '.7z', '.iso',
                # –ú–µ–¥–∏–∞ (–¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)
                '.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif'
            ],
            
            # –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ô–õ–´ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è —Å–µ—Å—Å–∏–π, –Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            'TEMPORARY': [
                # –û–±—â–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
                '.tmp', '.temp', '.crdownload', '.part',
                # Office –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
                '~$', '~wr', '~wrd', '~wrl', '~rf',
                # CAD –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ backup
                '.bak', '.dwl', '.dwl2', '.sv$', '.autosave',
                # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
                '.lock', '.lck'
            ],
            
            # –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ì–ù–û–†–ò–†–£–ï–ú–´–ï –§–ê–ô–õ–´ - –¥–∞–∂–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            'IGNORE': [
                '.log', '.cache', '.DS_Store', '.thumb', '.thumbs',
                'desktop.ini', '.tmp.metadata'
            ]
        }
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ Office —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.OFFICE_DEFAULT_NAMES = [
            '–Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç microsoft word.docx',
            '–Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç microsoft word.doc', 
            '–Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ microsoft excel.xlsx',
            '–Ω–æ–≤–∞—è –∫–Ω–∏–≥–∞ microsoft excel.xls',
            '–Ω–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è microsoft powerpoint.pptx',
            '–Ω–æ–≤–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è microsoft powerpoint.ppt',
            'document.docx',
            'document.doc',
            'workbook.xlsx',
            'workbook.xls', 
            'presentation.pptx',
            'presentation.ppt',
            '–ª–∏—Å—Ç microsoft excel.xlsx',
            '–ª–∏—Å—Ç microsoft excel.xls',
            '–¥–æ–∫—É–º–µ–Ω—Ç microsoft word.docx',
            '–¥–æ–∫—É–º–µ–Ω—Ç microsoft word.doc'
        ]
        
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.ignore_patterns = self.config.get('ignore_patterns', [])
        self.ignore_extensions = self.config.get('ignore_extensions', [])
        self.ignore_dirs = self.config.get('ignore_dirs', [])
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self._category_cache = {}
        
        # –î–û–ë–ê–í–õ–ï–ù–û: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        self._extended_temp_patterns = [
            # –§–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å HEX-–∏–º–µ–Ω–∞–º–∏ (—Ç–∏–ø–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
            r'^[0-9A-F]{4,16}$',
            r'^[0-9A-F]{4,16}\.tmp$',
            r'^[0-9A-F]{4,16}\.temp$',
            # –§–∞–π–ª—ã —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (—á–∞—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
            r'^[A-Z0-9]{4,8}$',
            r'^[A-Z0-9]{4,8}\.tmp$',
        ]
        
        self.logger.info(f"‚úÖ FileValidator initialized with {len(self.FILE_CATEGORIES['MAIN'])} main formats, "
                        f"{len(self.FILE_CATEGORIES['TEMPORARY'])} temporary patterns, "
                        f"{len(self.FILE_CATEGORIES['IGNORE'])} ignored patterns")

    def get_file_category(self, file_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ–∞–π–ª–∞"""
        filename = os.path.basename(file_path)
        
        # –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê –ü–†–ò –ü–†–ï–í–´–®–ï–ù–ò–ò –õ–ò–ú–ò–¢–ê
        if len(self._category_cache) > self._max_cache_size:
            self._category_cache.clear()
            self.logger.debug("üßπ Cleared category cache (size limit exceeded)")
        
        if file_path in self._category_cache:
            self._cache_hits += 1
            return self._category_cache[file_path]
    
        self._cache_misses += 1
        
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã
        if self._is_ignored_file(filename):
            self._category_cache[file_path] = 'IGNORE'
            return 'IGNORE'
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–≤–∫–ª—é—á–∞—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        if self._is_temporary_file(filename):
            self._category_cache[file_path] = 'TEMPORARY'
            return 'TEMPORARY'
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        file_ext = os.path.splitext(filename)[1].lower()
        if file_ext in self.FILE_CATEGORIES['MAIN']:
            self._category_cache[file_path] = 'MAIN'
            return 'MAIN'
        
        # 4. –§–∞–π–ª –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é - —Å—á–∏—Ç–∞–µ–º IGNORE
        self._category_cache[file_path] = 'IGNORE'
        return 'IGNORE'

    def is_office_default_name(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏–º–µ–Ω–µ–º Office"""
        filename = os.path.basename(file_path).lower()
        return filename in self.OFFICE_DEFAULT_NAMES

    def should_monitor_file(self, file_path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∞–π–ª"""
        if not os.path.isfile(file_path):
            return False
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        file_category = self.get_file_category(file_path)
        
        if file_category == 'IGNORE':
            self.logger.debug(f"üö´ Ignoring file (category: IGNORE): {os.path.basename(file_path)}")
            return False
        
        if file_category == 'TEMPORARY':
            self.logger.debug(f"‚è∞ Temporary file, monitoring for context: {os.path.basename(file_path)}")
            return True  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –Ω–µ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏–∏
        
        if file_category == 'MAIN':
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            if not self._passes_additional_checks(file_path):
                return False
            return True
        
        return False

    def should_monitor_file_by_name(self, file_path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ –∏–º–µ–Ω–∏ (–∫–æ–≥–¥–∞ —Ñ–∞–π–ª —É–∂–µ —É–¥–∞–ª–µ–Ω)"""
        filename = os.path.basename(file_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, –Ω–æ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        file_category = self.get_file_category(file_path)
        
        if file_category == 'IGNORE':
            self.logger.debug(f"üö´ Ignoring deleted file (category: IGNORE): {filename}")
            return False
        
        if file_category == 'TEMPORARY':
            self.logger.debug(f"‚è∞ Deleted temporary file: {filename}")
            return True
        
        if file_category == 'MAIN':
            return True
        
        return False

    def _is_ignored_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–º"""
        filename_lower = filename.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã IGNORE
        for pattern in self.FILE_CATEGORIES['IGNORE']:
            if self._matches_pattern(filename_lower, pattern):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ ignore_patterns
        for pattern in self.ignore_patterns:
            if self._matches_pattern(filename_lower, pattern):
                return True
        
        return False

    def _is_temporary_file(self, filename: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤—Ä–µ–º–µ–Ω–Ω—ã–º - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        filename_lower = filename.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã TEMPORARY
        for pattern in self.FILE_CATEGORIES['TEMPORARY']:
            if self._matches_pattern(filename_lower, pattern):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        for pattern in self._extended_temp_patterns:
            if re.match(pattern, filename, re.IGNORECASE):
                return True
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
        specific_temp_patterns = [
            r'~wrl\d+\.tmp',      # Word
            r'~wrd\d+\.tmp',      # Word  
            r'~rf.*\.tmp',        # Excel
            r'.*\.tmp\..*',       # –§–∞–π–ª—ã —Å –¥–≤–æ–π–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
            r'^~\$.*',            # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ Office
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è Excel/Word –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            r'^[A-F0-9]{8}\.tmp$',  # E3327DC9.tmp –∏ –ø–æ–¥–æ–±–Ω—ã–µ
            r'^[A-F0-9]{8}$',       # C1EE4200 –∏ –ø–æ–¥–æ–±–Ω—ã–µ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
        ]
        
        for pattern in specific_temp_patterns:
            if re.match(pattern, filename_lower):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –∏–º–µ–Ω–∞–º–∏ (—á–∞—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ)
        name_without_ext = os.path.splitext(filename)[0]
        if '.' not in filename and len(name_without_ext) <= 8 and name_without_ext.isalnum():
            if name_without_ext.isupper() or all(c in '0123456789ABCDEF' for c in name_without_ext.upper()):
                return True
        
        return False

    def _matches_pattern(self, filename: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º"""
        # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å * (–Ω–∞–ø—Ä–∏–º–µ—Ä, "*.tmp")
        if pattern.startswith('*') and filename.endswith(pattern[1:]):
            return True
        # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è –Ω–∞ * (–Ω–∞–ø—Ä–∏–º–µ—Ä, "~*")
        elif pattern.endswith('*') and filename.startswith(pattern[:-1]):
            return True
        # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å * –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        elif '*' in pattern:
            if fnmatch.fnmatch(filename, pattern):
                return True
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        elif filename == pattern:
            return True
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
        elif self._is_regex_match(filename, pattern):
            return True
        
        return False

    def _is_regex_match(self, filename: str, pattern: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö regex-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º fnmatch-–ø–∞—Ç—Ç–µ—Ä–Ω –≤ regex
            regex_pattern = fnmatch.translate(pattern)
            return re.match(regex_pattern, filename) is not None
        except re.error:
            return False

    def _passes_additional_checks(self, file_path: str) -> bool:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        filename = os.path.basename(file_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        file_ext = os.path.splitext(filename)[1].lower()
        if file_ext in self.ignore_extensions:
            self.logger.debug(f"Ignoring file due to extension: {filename}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ –ø—É—Ç–∏
        if self._contains_ignore_dirs(file_path):
            self.logger.debug(f"Ignoring file in excluded directory: {file_path}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã)
        try:
            file_size = os.path.getsize(file_path)
            if file_size < 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –º–µ–Ω—å—à–µ 10 –±–∞–π—Ç
                self.logger.debug(f"Ignoring too small file: {filename} ({file_size} bytes)")
                return False
        except (OSError, ValueError):
            pass
        
        return True

    def _contains_ignore_dirs(self, file_path: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        if not self.ignore_dirs:
            return False
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç–∏
        normalized_path = os.path.normpath(file_path).lower()
        path_parts = normalized_path.split(os.sep)
        
        for ignore_dir in self.ignore_dirs:
            ignore_dir_normalized = os.path.normpath(ignore_dir).lower()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –ø—É—Ç–∏
            if ignore_dir_normalized in path_parts:
                return True
        
        return False

    def get_monitorable_files(self, directory: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        monitorable_files = []
        
        try:
            for root, dirs, files in os.walk(directory):
                # –ò—Å–∫–ª—é—á–∞–µ–º –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—Ö–æ–¥–∞
                dirs[:] = [d for d in dirs if not self._should_ignore_dir(os.path.join(root, d))]
                
                for file in files:
                    file_path = os.path.join(root, file)
                    if self.should_monitor_file(file_path):
                        monitorable_files.append(file_path)
                        
        except Exception as e:
            self.logger.error(f"Error scanning directory {directory}: {e}")
        
        return monitorable_files

    def _should_ignore_dir(self, dir_path: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        dir_name = os.path.basename(dir_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for pattern in self.ignore_patterns:
            if self._matches_pattern(dir_name, dir_path):
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑ ignore_dirs
        if self.ignore_dirs:
            normalized_path = os.path.normpath(dir_path).lower()
            
            for ignore_dir in self.ignore_dirs:
                ignore_dir_normalized = os.path.normpath(ignore_dir).lower()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if ignore_dir_normalized == dir_name.lower():
                    return True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –ø—É—Ç—å
                if ignore_dir_normalized in normalized_path.split(os.sep):
                    return True
        
        return False

    def clear_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        self._category_cache.clear()